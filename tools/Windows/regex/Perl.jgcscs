JGCSCS
5
Perl script
*.pl;*.pm
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.perl.org
TRUE
#

0
5
# Perl
sub Test {
  $string = "String $test";
  $number = 1234 if $string =~ m/regex/i;
}
0
FALSE
26
Opening bracket

{
FALSE
FALSE
25
0


0
FALSE
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
Closing bracket

}
FALSE
FALSE
25
0


0
FALSE
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
Opening bracket

(?<!\$)\[
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
Closing bracket

(?<!\$)]
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
Opening parenthesis

(?<!\$)\(
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

()
code
FALSE
)
Closing parenthesis

(?<!\$)\)
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
()
code
FALSE
(
Single-quoted string
String delimited by single quotes.  Quotes can appear in the string if they are escaped with a \
(?<!\$)(')[^'\\\r\n]*+(?:\\(?:.|$)[^'\\\r\n]*+)*+(')?
FALSE
FALSE
17
0


0
TRUE
FALSE
FALSE
FALSE
1
2

code
FALSE
'
Double-quoted string

(?<!\$)"
FALSE
TRUE
17
0


4
FALSE
FALSE
FALSE
FALSE
0

DQ
code
FALSE
"
Command

(?<!\$)`
FALSE
FALSE
11
0


6
FALSE
FALSE
FALSE
FALSE
0

BT
code
FALSE
`
Comment
Single-line comment starts with # and continues until the end of the line.  The # character can also appear in $#variable
(?<!\$)#.*+
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Double-slashed string
q// where the slash can be any non-word non-blank character or a pair of matching brackets (we also disallow the $ so a lone m at the end of the line doesn't cause the following lines to flash if they start with a $)
\b(?<![$-])q\s*+(?:\([^)\\]*+(?:\\.[^)\\]*+)*+(?:\)\w*)?|\[[^\]\\]*+(?:\\.[^\]\\]*+)*+(?:\]\w*)?|\{[^}\\]*+(?:\\.[^}\\]*+)*+(?:\}\w*)?|([^]})$\w\s]).*?(?<!\\)(?:\\\\)*\1\w*)
FALSE
TRUE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Double-slashed interpolated string
qq// or qw// where the slash can be any non-word non-blank character or a pair of matching brackets (we also disallow the $ so a lone m at the end of the line doesn't cause the following lines to flash if they start with a $)
\b(?<![$-])q[qw]\s*+(?:\([^)\\]*+(?:\\.[^)\\]*+)*+(?:\)\w*)?|\[[^\]\\]*+(?:\\.[^\]\\]*+)*+(?:\]\w*)?|\{[^}\\]*+(?:\\.[^}\\]*+)*+(?:\}\w*)?|([^]})$\w\s]).*?(?<!\\)(?:\\\\)*\1\w*)
FALSE
TRUE
17
0


7
FALSE
FALSE
FALSE
FALSE




FALSE

Double-slashed regex
m// or qr// where the slash can be any non-word non-blank character or a pair of matching brackets (we also disallow the $ so a lone m at the end of the line doesn't cause the following lines to flash if they start with a $)
\b(?<![$-])(?:m|qr)\s*+(?:\([^)\\]*+(?:\\.[^)\\]*+)*+(?:\)\w*)?|\[[^\]\\]*+(?:\\.[^\]\\]*+)*+(?:\]\w*)?|\{[^}\\]*+(?:\\.[^}\\]*+)*+(?:\}\w*)?|([^]})$\w\s]).*?(?<!\\)(?:\\\\)*\1\w*)
FALSE
TRUE
18
0


5
FALSE
FALSE
FALSE
FALSE




FALSE

Double-slashed regex
// without the m or qr.  We require the =~ or !~ operator, the .. range operator, the split command, or an opening parenthesis to be present, so there's no confusion between // and the division operator
(?<=(?>[=!]~|\(|\.\.|\bsplit)\s*)/[^/\\]*+(?:\\.[^/\\]*+)*+(?:/\w*)?
FALSE
FALSE
18
0


5
FALSE
FALSE
FALSE
FALSE




FALSE

Triple-slashed string
s/// tr/// y/// where the slash can be any non-word non-blank character or two pairs of matching brackets (we also disallow the $ so a lone s at the end of the line doesn't cause the following lines to flash if they start with a $)
\b(?<![$-])(?:s|y|tr)(?:(?:\s*+\([^)\\]*+(?:\\.[^)\\]*+)*+\)){2}|(?:\s*+\[[^\]\\]*+(?:\\.[^\]\\]*+)*+\]){2}|(?:\s*+\{[^}\\]*+(?:\\.[^}\\]*+)*+\}){2}|\s*+([^]})$\w\s])(?:.*?(?<!\\)(?:\\\\)*\1){2})\w*
FALSE
TRUE
18
0


5
FALSE
FALSE
FALSE
FALSE




FALSE

Slashed interpolated command
qx// where the slash can be any non-word non-blank character or a pair of matching brackets (we also disallow the $ so a lone m at the end of the line doesn't cause the following lines to flash if they start with a $)
\b(?<![$-])qx\s*+(?:\([^)\\]*+(?:\\.[^)\\]*+)*+(?:\)\w*)?|\[[^\]\\]*+(?:\\.[^\]\\]*+)*+(?:\]\w*)?|\{[^}\\]*+(?:\\.[^}\\]*+)*+(?:\}\w*)?|([^]})$\w\s]).*?(?<!\\)(?:\\\\)*\1\w*)
FALSE
TRUE
11
0


8
FALSE
FALSE
FALSE
FALSE




FALSE

Float

(?<!\$)(?>\b[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?\b
FALSE
FALSE
20
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Number
Integer, hexadecimal and binary
\b(?<!\$)(?:[0-9]++|0x[0-9a-fA-F]++|0b[01]++)\b
FALSE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Keyword

\b(?<!\$)(?>and|close|die|do|else|elsif|eq|exit|for(?:each)?|gt|if|join|keys|last|length|local|lc|lt|my|next|ne|not|open|or|print|return|require|shift|split|splice|stat|substr|sub|uc|undef|unless|use|values|warn|while|xor)\b
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Here document
Properly finished here document.  A here document is started by an identifier preceded by << and terminated by the same identifier at the beginning of a line.
<<"?+([A-Za-z0-9_]++)\b"?+.*?^\1\b
FALSE
TRUE
17
0


3
TRUE
FALSE
FALSE
FALSE




FALSE

Here document (open)
Here document of which the terminator is not present and therefore continues until the end of the file.
<<"?+([A-Za-z0-9_]++)\b"?+.*+
FALSE
TRUE
17
0


3
TRUE
FALSE
FALSE
FALSE




FALSE

Here document
Properly finished non-interpolating here document.  A here document is started by an identifier preceded by << and terminated by the same identifier at the beginning of a line.
<<'([A-Za-z0-9_]++)'.*?^\1\b
FALSE
TRUE
17
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Here document
Non-interpolating here document of which the terminator is not present and therefore continues until the end of the file.
<<'([A-Za-z0-9_]++)'.*
FALSE
TRUE
17
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Here document operator

<<
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

POD
POD Documentation
^=(?:head[12]|item|over|back|pod|for).*+[\r\n]++(?:(?!=cut|=end).*+[\r\n]*+)*+(?:=cut|=end)?+.*+
FALSE
FALSE
10
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Operator
Don't quantify this to prevent the opening / of a regex being seen as an operator when it occurs immediately after =~
(?<!\$)[-.=+*/<>|&!~]
FALSE
FALSE
23
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

0
6
Interpolated here document
0
17
TRUE
0


1
Variable
Don't forget the negative look-behind (?<!\\) to make sure the $ wasn't escaped!
(?<!\\)[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\b)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Interpolated string
1
17
TRUE
0


3
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Closing "

"
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
DQ
code
FALSE
"
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\b)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Interpolated pattern
0
18
FALSE
0


2
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\b)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Escape
Skip over escaped characters
\\.
FALSE
FALSE
18
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Interpolated command
1
11
FALSE
0


3
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
11
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Closing `

`
FALSE
FALSE
11
0


2
FALSE
FALSE
FALSE
FALSE

0
BT
code
FALSE
`
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\b)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Interpolated slashed string
0
17
FALSE
0


2
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\b)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Escape
Skip over escaped characters
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Interpolated slashed command
0
11
FALSE
0


2
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\b)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Escape
Skip over escaped characters
\\.
FALSE
FALSE
11
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

