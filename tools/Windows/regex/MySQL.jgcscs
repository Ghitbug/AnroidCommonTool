JGCSCS
5
MySQL
*.sql
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.mysql.org
TRUE
#

1
Complete MySQL coloring scheme.  Colors multi-line comments, and allows strings to span across multiple lines, like MySQL does.  Slow for very large SQL files (like those created by mysqldump), since it must parse the whole file from the start.
2
-- MySQL
select count(*) from sometable where somefield = 'test';
0
FALSE
14
Keyword

\m(?<!@)BEGIN\M
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE
0

BEGIN-END
sql
FALSE
END
Keyword

\m(?<!@)END\M
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE

0
BEGIN-END
sql
FALSE
BEGIN
Keyword

\m(?>ACCESSIBLE|ADD|ALL|ALTER|ANALYZE|AND|ASC?|ASENSITIVE|BEFORE|BETWEEN|BIGINT|BINARY|BLOB|BOTH|BY|CALL|CASCADE|CASE|CHANGE|CHAR(?:ACTER)?|CHECK|COLLATE|COLUMN|CONDITION|CONSTRAINT|CONTINUE|CONVERT|CREATE|CROSS|CURRENT_DATE|CURRENT_TIME(?:STAMP)?|CURRENT_USER|CURSOR|DATABASES?|DAY_HOUR|DAY_MICROSECOND|DAY_MINUTE|DAY_SECOND|DEC(?:IMAL)?|DECLARE|DEFAULT|DELAYED|DELETE|DESC(?:RIBE)|DETERMINISTIC|DISTINCT(?:ROW)?|DIV|DOUBLE|DROP|DUAL|EACH|ELSE(?:IF)?|ENCLOSED|ESCAPED|EXISTS|EXIT|EXPLAIN|FALSE|FETCH|FLOAT[48]?|FOR(?:CE)?|FOREIGN|FROM|FULLTEXT|GET|GRANT|GROUP|HAVING|HIGH_PRIORITY|HOUR_MICROSECOND|HOUR_MINUTE|HOUR_SECOND|IF|IGNORE|IN(?:DEX|FILE|NER|OUT|SENSITIVE|SERT|T(?>[12348]|EGER|ERVAL|O)?)?|IO_AFTER_GTIDS|IO_BEFORE_GTIDS|IS|ITERATE|JOIN|KEYS?|KILL|LEADING|LEAVE|LEFT|LIKE|LIMIT|LINEAR|LINES|LOAD|LOCALTIME(?:STAMP)|LOCK|LONG(?>BLOB|TEXT)?|LOOP|LOW_PRIORITY|MASTER_BIND|MASTER_SSL_VERIFY_SERVER_CERT|MATCH|MAXVALUE|MEDIUMBLOB|MEDIUMINT|MEDIUMTEXT|MIDDLEINT|MINUTE_MICROSECOND|MINUTE_SECOND|MOD(?:IFIES)?|NATURAL|NONBLOCKING|NOT|NO_WRITE_TO_BINLOG|NULL|NUMERIC|ON|OPTIMIZE|OPTION(?:ALLY)?|OR(?:DER)?|OUT(?>ER|FILE)?|PARTITION|PRECISION|PRIMARY|PROCEDURE|PURGE|RANGE|READS?|READ_WRITE|REAL|REFERENCES|REGEXP|RELEASE|RENAME|REPEAT|REPLACE|REQUIRE|RESIGNAL|RESTRICT|RETURN|REVOKE|RIGHT|RLIKE|SCHEMAS?|SECOND_MICROSECOND|SELECT|SENSITIVE|SEPARATOR|SET|SHOW|SIGNAL|SMALLINT|SPATIAL|SPECIFIC|SQL(?>EXCEPTION|STATE|WARNING|_BIG_RESULT|_CALC_FOUND_ROWS|_SMALL_RESULT)?|SSL|STARTING|STRAIGHT_JOIN|TABLE|TERMINATED|THEN|TINYBLOB|TINYINT|TINYTEXT|TO|TRAILING|TRIGGER|TRUE|UNDO|UNION|UNIQUE|UNLOCK|UNSIGNED|UPDATE|USAGE|USE|USING|UTC_DATE|UTC_TIME(?:STAMP)?|VALUES|VARBINARY|VARCHAR(?:ACTER)?|VARYING|WHEN|WHERE|WHILE|WITH|WRITE|XOR|YEAR_MONTH|ZEROFILL)\M
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Functions

\m(?>ABS|ACOS|ADDDATE|ADDTIME|AES_DECRYPT|AES_ENCRYPT|ASCII|ASIN|ATAN|AVG|BENCHMARK|BIN|BIT_AND|BIT_COUNT|BIT_LENGTH|BIT_OR|BIT_XOR|CAST|CEIL(?:ING)?|CHAR(?:_LENGTH|ACTER_LENGTH|SET)?|COALESCE|COERCIBILITY|COLLATION|COMPRESS|CONCAT(?:_WS)?|CONNECTION_ID|CONV(?:ERT(?:_TZ)?)?|COS|COT|COUNT|CRC32|CURDATE|CURTIME|DATABASE|DATE(?>_ADD|_FORMAT|_SUB|DIFF)?|DAY(?>NAME|OFMONTH|OFWEEK|OFYEAR)?|DECODE|DEFAULT|DEGREES|DES_DECRYPT|DES_ENCRYPT|ELT|ENCODE|ENCRYPT|EXP(?:ORT_SET)?|EXTRACT(?:Value)?|FIELD|FIND_IN_SET|FLOOR|FORMAT|FOUND_ROWS|FROM_BASE64|FROM_DAYS|FROM_UNIXTIME|GET_FORMAT|GET_LOCK|GREATEST|GROUP_CONCAT|GTID_SUBSET|GTID_SUBTRACT|HEX|HOUR|IF(?:NULL)?|IN(?>ET_ATON|ET_NTOA|ET6_ATON|ET6_NTOA|SERT|STR|TERVAL)?|IS_FREE_LOCK|IS_IPV4(?:_COMPAT|_MAPPED)?|IS_IPV6|IS_USED_LOCK|ISNULL|LAST_INSERT_ID|LCASE|LEAST|LEFT|LENGTH|LN|LOAD_FILE|LOCATE|LOG(?>10|2)?|LOWER|LPAD|LTRIM|MAKE_SET|MAKEDATE|MAKETIME|MASTER_POS_WAIT|MAX|MD5|MICROSECOND|MID|MIN(?:UTE)?|MOD|MONTH(?:NAME)?|NAME_CONST|NOW|NULLIF|OCT(?:ET_LENGTH)?|OLD_PASSWORD|ORD|PASSWORD|PERIOD_ADD|PERIOD_DIFF|PI|POSITION|POW(?:ER)?|QUARTER|QUOTE|RADIANS|RAND|RELEASE_LOCK|REPEAT|REPLACE|REVERSE|RIGHT|ROUND|ROW_COUNT|RPAD|RTRIM|SCHEMA|SEC_TO_TIME|SECOND|SESSION_USER|SHA2|SIGN|SIN|SLEEP|SOUNDEX|SPACE|SQRT|STD(?:DEV(?>_POP|_SAMP)?)?|STR_TO_DATE|STRCMP|SUBDATE|SUBSTR(?>ING(?:_INDEX)?)?|SUBTIME|SUM|SYSDATE|SYSTEM_USER|TAN|TIME(?>_FORMAT|_TO_SEC|DIFF|STAMP(?>ADD|DIFF)?)?|TO_BASE64|TO_DAYS|TO_SECONDS|TRIM|TRUNCATE|UCASE|UNCOMPRESS(?:ED_LENGTH)?|UNHEX|UNIX_TIMESTAMP|UpdateXML|UPPER|USER|UTC_DATE|UTC_TIME(?:STAMP)?|UUID(?:_SHORT)?|VALIDATE_PASSWORD_STRENGTH|VALUES|VAR_POP|VAR_SAMP|VARIANCE|VERSION|WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS|WEEK(?>DAY|OFYEAR)?|WEIGHT_STRING|YEAR(?:WEEK)?)\M
TRUE
FALSE
13
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?\M
TRUE
FALSE
20
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Integer

\m[0-9]++\M|\m0x[0-9a-f]+\M
TRUE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Single-line comment
MySQL requires a space or a tab after -- to begin a comment
--(?:[ \t].*+|$)
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Single-line comment

#.*+
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Multi-line comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
/\*
FALSE
FALSE
9
0


3
FALSE
FALSE
FALSE
FALSE
0

/**/
sql
FALSE

Single-quoted string

'
FALSE
FALSE
17
0


4
FALSE
FALSE
FALSE
FALSE
0

SQ
sql
FALSE
'
Double-quoted string

"
FALSE
FALSE
17
0


5
FALSE
FALSE
FALSE
FALSE
0

DQ
sql
FALSE
"
Opening parenthesis

\(
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

()
sql
FALSE
)
Closing parenthesis

\)
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
()
sql
FALSE
(
Operator
Don't repeat the character class so =-- is properly highlighted as a comment after an equals sign
[-+*/=<>]
FALSE
FALSE
23
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

0
3
Multi-line comment
1
9
TRUE
0


1
Closing */

\*/
FALSE
FALSE
9
0


2
FALSE
FALSE
FALSE
FALSE

0
/**/
sql
FALSE

Single-quoted string
1
17
TRUE
0


3
Escaped character
This element makes sure escaped characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Doubled single quote
Quote characters can be doubled to include a single quote character in the string
''
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Closing '

'
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
SQ
sql
FALSE
'
Double-quoted string
1
17
TRUE
0


3
Escaped character
This element makes sure escaped characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Doubled double quote
Quote characters can be doubled to include a single quote character in the string
""
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Closing "

"
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
DQ
sql
FALSE
"
