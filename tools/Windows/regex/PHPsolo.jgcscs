JGCSCS
5
PHP without HTML
*.php;*.php3
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.php.net
TRUE
#

1
Stand-alone PHP code.  That is: without HTML.
5
// PHP without HTML
function test($param) {
  $number = 1234;
  $string = "This is a $test";
}
0
FALSE
19
Opening bracket

{
FALSE
FALSE
25
0


0
FALSE
FALSE
FALSE
FALSE
0

{}
php
FALSE
}
Closing bracket

}
FALSE
FALSE
25
0


0
FALSE
FALSE
FALSE
FALSE

0
{}
php
FALSE
{
Opening parenthesis

\(
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

()
php
FALSE
)
Closing parenthesis

\)
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
()
php
FALSE
(
Opening bracket

\[
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

[]
php
FALSE
]
Closing bracket

]
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
[]
php
FALSE
[
Reserved words

\b(?:__(?:CLASS|FILE|FUNCTION|LINE|METHOD)__|and|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|echo|else(?:if)?|empty|enddeclare|endfor(?:each)?|endif|endswitch|endwhile|eval|exception|exit|extends|for(?:each)?|function|global|if|include(?:_once)?|isset|list|new|old_function|or|php_user_filter|print|require(?:_once)?|return|static|switch|unset|use|var|while|xor)\b
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Single-line comment
Note that the PHP closing tag is also considered end-of-line and will stop the comment and the PHP section.  We use zero-width positive lookahead (?=...) for the ?> as it is not part of the comment
(//|#).*?((?=\?>)|$)
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Mutli-line comment

/\*
FALSE
TRUE
9
0


7
FALSE
FALSE
FALSE
FALSE
0

/**/
php
FALSE
*/
Float

(?>\b[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?\b
TRUE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Integer

\b[0-9]++\b
FALSE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Hexadecimal

\b0x[a-f0-9]++\b
TRUE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:->[A-Za-z_][A-Za-z0-9_]*+)*+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Single-quoted string

'
FALSE
FALSE
17
0


4
FALSE
FALSE
FALSE
FALSE
0

SQ
php
FALSE
'
Double-quoted string

"
FALSE
FALSE
17
0


3
FALSE
FALSE
FALSE
FALSE
0

DQ
php
FALSE
"
Execution operator

`
FALSE
FALSE
11
0


6
FALSE
FALSE
FALSE
FALSE
0

BT
php
FALSE
`
Here document
Properly finished here document.  A here document is started by an identifier preceded by << and terminated by the same identifier at the beginning of a line.
<<<([A-Za-z0-9_]++)\b.*?^(\1)\b
FALSE
TRUE
17
0


5
TRUE
FALSE
FALSE
FALSE
1
2

php
FALSE

Open here document
Here document with missing terminator
<<<([A-Za-z0-9_]++)\b.*+
FALSE
TRUE
17
0


5
TRUE
FALSE
FALSE
FALSE
1


php
FALSE
\1
Operator
(don't repeat the character class, since that will disable heredoc code like $x=<<<x;
[-.=+*/<>|&!~]
FALSE
FALSE
23
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

6
(
)
TRUE
3
[
]
TRUE
3
{
}
TRUE
3
'
'
FALSE
2
"
"
FALSE
5
/*
*/
FALSE
2
5
Interpolated String
1
17
TRUE
0


3
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Closing "

"
FALSE
FALSE
17
0


1
FALSE
FALSE
FALSE
FALSE

0
DQ
php
FALSE
"
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Single-quoted string
1
17
TRUE
0


2
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)' would fail to match the closing " in 'string\\'
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Closing '

'
FALSE
FALSE
17
0


1
FALSE
FALSE
FALSE
FALSE

0
SQ
php
FALSE
'
Here document
0
17
TRUE
0


1
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Execution Operator
1
11
FALSE
0


3
Escaped character
This element makes sure escaped ` and $ characters are skipped
\\.
FALSE
FALSE
11
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Closing `

`
FALSE
FALSE
11
0


1
FALSE
FALSE
FALSE
FALSE

0
BT
php
FALSE
`
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\r\n]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

PHP Comment
1
9
FALSE
0


1
Closing */

\*/
FALSE
FALSE
9
0


1
FALSE
FALSE
FALSE
FALSE

0
/**/
php
FALSE
/*
