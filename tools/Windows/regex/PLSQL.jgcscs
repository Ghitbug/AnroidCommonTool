JGCSCS
5
PL/SQL
*.OracleDataProvider;*.sql
Just Great Software
support@editpadpro.com
http://www.editpadpro.com/
http://www.oracle.com/
TRUE
--

1
Complete PL/SQL (Oracle) coloring scheme.  Colors multi-line comments, and allows strings to span across multiple lines, like PL/SQL does.  Slow for very large SQL files, since it must parse the whole file from the start.
25
-- PL/SQL Oracle Server
DECLARE
  lNumber NUMBER(2)         := 13;
  lText   VARCHAR2(12 CHAR) := 'Hello world';
  lTextN  NVARCHAR2(20)     := NQ'<N'nchar literal>';
  lDate   DATE              := SYSDATE;
  lCount  PLS_INTEGER;
BEGIN
  /*
  Some multi-line comment
  */
  SELECT --+ FULL(SOMETABLE)
         1 /* + NVL(LENGTH('TEXT'), 0) */
    INTO lCount
    FROM SOMETABLE
   WHERE TIMESTAMPFIELD = SYSTIMESTAMP
     FOR UPDATE OF SOMEFIELD1, SOMEFIELD2 NOWAIT;
  --
  DBMS_OUTPUT.PUT_LINE(TRIM(SUBSTR(lText, 1, 5)));
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(lNumber) || ';' || TO_CHAR(lDate, 'YYYY-MM-DD'));
EXCEPTION
  WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
    RETURN;
END;
/
0
FALSE
29
Function with arguments

80
\m(?>
ABS|
ACOS|
ADD_MONTHS|
APPENDCHILDXML|
AS(?>CII(?>STR)?+|IN)|
ATAN2?+|
AVG|
BFILENAME|
BI(?>N_TO_NUM|TAND)|
CA(?>RDINALITY|ST)|
CEIL|
CLUSTER_(?>ID|PROBABILITY|SET)|
CH(?>ARTOROWID|R)|
CO(?>ALESCE|LLECT|MPOSE|NCAT|NVERT|RR(?>_[KS])?+|SH?+|UNT|VAR_(?>POP|SAMP))|
CU(?>ME_DIST|RRENT_(?>DATE|TIMESTAMP))|
CV|
DBTIMEZONE|
DE(?>CO(?>DE|MPOSE)|LET(?>EXML|ING)|NSE_RANK|PTH)|
DUMP|
DEREF|
EMPTY_(?>BLOB|CLOB)|
EX(?>ISTSNODE|P|TRACT(?>VALUE)?+)|
FEATURE_(?>ID|SET|VALUE)|
FIRST(_VALUE)?+|
FLOOR|
FROM_TZ|
GR(?>EATEST|OUP(?>_ID|ING(?>_ID)?+))|
HEXTORAW|
IN(?>ITCAP|SERT(?>CHILDXML|ING|XMLBEFORE)|STR[BC24]?+)|
ITERATION_NUMBER|
LA(?>G|ST(?>_(?>DAY|VALUE))?+)|
LE(?>AD|AST|NGTH[BC24]?+)|
LN(?>NVL)?+|
LO(?>CALTIMESTAMP|G|WER)|
LPAD|
LTRIM|
MA(?>X|KE_REF)|
MEDIAN|
MIN|
MO(?>D|NTHS_BETWEEN)|
NANVL|
NE(?>W_TIME|XT_DAY)|
NLS(?>_(?>CHARSET_(?>DECL_LEN|ID|NAME)|INITCAP|LOWER|UPPER)|SORT)|
NTILE|
NU(?>LLIF|MTO(?>DSINTERVAL|YMINTERVAL))|
NVL2?+|
ORA_HASH|
PATH|
PERCENT(?>ILE_(?>CONT|DISC)|_RANK)|
POWER(?>MULTISET(?>_BY_CARDINALITY)?+)?+|
PRE(?>DICTION(?>_(?>COST|DETAILS|PROBABILITY|SET))?+|SENT(?>NNV|V)|VIOUS)|
RA(?>NK|ISE_APPLICATION_ERROR|TIO_TO_REPORT|WTO(?>HEX|NHEX))|
RE(?>F(?>TOHEX)?+|(?>GEXP_(?>INSTR|LIKE|REPLACE|SUBSTR|COUNT)|MAINDER|PLACE)|GR_(?>AVG[XY]|COUNT|INTERCEPT|R2|SLOPE|SX[XY]|SYY))|
RO(?>UND|W_NUMBER|WIDTO(?>CHAR|NCHAR))|
RPAD|
RTRIM|
SCN_TO_TIMESTAMP|
SE(?>SSIONTIMEZONE|T)|
SI(?>GN|NH?+)|
SOUNDEX|
SQ(?>LCODE|LERRM|RT)|
STATS_(?>BINOMIAL_TEST|CROSSTAB|F_TEST|KS_TEST|MODE|MW_TEST|ONE_WAY_ANOVA|T_TEST_(?>INDEPU?+|ONE|PAIRED)|WSR_TEST)|
ST(?>ATEMENT|DDEV(?>_POP|_SAMP)?+)|
SU(?>BSTR[BC24]?+|M)|
SYS(?>_(?>CON(?>NECT_BY_PATH|TEXT)|DBURIGEN|EXTRACT_UTC|GUID|TYPEID|XML(?>AGG|GEN))|DATE|TIMESTAMP)|
TANH?+|
TIMESTAMP_TO_SCN|
TO_(?>BINARY_(?>DOUBLE|FLOAT)|CHAR|CLOB|DATE|DSINTERVAL|LOB|MULTI_BYTE|NCHAR|NCLOB|NUMBER|SINGLE_BYTE|TIMESTAMP(?>_TZ)?+|YMINTERVAL)|
TR(?>ANSLATE|EAT|IM|UNC)|
TZ_OFFSET|
UID|
UNISTR|
UP(?>DAT(?>EXML|ING)|PER)|
USER(?:ENV)?|
VA(?>R(?>_POP|_SAMP|IANCE)|LUE)|
VSIZE|
WIDTH_BUCKET|
XML(?>AGG|CDATA|COLATTVAL|COMMENT|CONCAT|FOREST|PARSE|PI|QUERY|ROOT|SEQUENCE|SERIALIZE|TABLE|TRANSFORM)
)(?=\s*+\()
TRUE
FALSE
13
0


0
FALSE
TRUE
FALSE
FALSE




FALSE

Function without arguments

14
\m(?>
CURRENT_(?>DATE|TIMESTAMP)|
CV|
DBTIMEZONE|
DE(?>LETING|NSE_RANK)|
GROUP_ID|
INSERTING|
SESSIONTIMEZONE|
SQ(?>LCODE|LERRM)|
SYS(?>DATE|TIMESTAMP)|
UID|
UPDATING|
USER
)\M
TRUE
FALSE
13
0


0
FALSE
TRUE
FALSE
FALSE




FALSE

Exception constant

21
\m(?>
ACCESS_INTO_NULL|
CASE_NOT_FOUND|
COLLECTION_IS_NULL|
CURSOR_ALREADY_OPEN|
DUP_VAL_ON_INDEX|
INVALID_(?>CURSOR|NUMBER)|
LOGIN_DENIED|
NO(?>_DATA_FOUND|T_LOGGED_ON)|
OTHERS|
PROGRAM_ERROR|
ROWTYPE_MISMATCH|
SELF_IS_NULL|
STORAGE_ERROR|
SUBSCRIPT_(?>BEYOND_COUNT|OUTSIDE_LIMIT)|
SYS_INVALID_ROWID|
TIMEOUT_ON_RESOURCE|
TOO_MANY_ROWS|
VALUE_ERROR|
ZERO_DIVIDE
)\M
TRUE
FALSE
15
0


0
FALSE
TRUE
FALSE
FALSE




FALSE

Keyword block

\m(?<!@)(?:CASE|IF|LOOP)\M
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE
0

\0
sql
FALSE
END \0
Keyword block end

\m(?<!@)END[ \t]++(CASE|IF|LOOP)\M
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE

0
\1
sql
FALSE
\1
Begin block

\m(?<!@)BEGIN\M
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE
0

BEGIN-END
sql
FALSE
END
End block

\m(?<!@)END\M
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE

0
BEGIN-END
sql
FALSE
BEGIN
Keyword

149
\m(?>
ACCESS|
ADD|
AG(?>ENT|GREGATE)|
AL(?>L|TER)|
AN[DY]|
ARRAY|
ASC?+|
AT(?>TRIBUTE)?+|
AU(?>DIT|THID)|
AVG|
A|
BETWEEN|
BFILE(?>_BASE)?+|
BINARY(?>_DOUBLE|_FLOAT|_INTEGER)?+|
BL(?>OB(?>_BASE)?+|OCK)|
BO(?>DY|OLEAN|TH|UND)|
BULK|
BY(?>TE)?+|
CALL(?>ING)?+|
CASCADE|
CHAR(?>_BASE|ACTER|SET(?>FORM|ID)?+)?+|
CHECK|
CL(?>OB(?>_BASE)?+|OSE|USTERS?+)|
COL(?>AUTH|LECT|UMN(?>_VALUE|S)?+)|
COM(?>M(?>ENT|IT(?>TED)?+)|PILED|PRESS)|
CON(?>ST(?>ANT|RUCTOR)|NECT|TEXT|TINUE|VERT)|
COUNT|
CR(?>ASH|EATE)|
CUR(?>RENT|SOR)|
CUSTOMDATUM|
C|
DANGLING|
DA(?>TA|TE(?>_BASE)?+|Y)|
DEC(?>IMAL|LARE)?+|
DEF(?>AULT|INE)|
DE(?>LETE|SC|TERMINISTIC)|
DISTINCT|
DOUBLE|
DROP|
DSINTERVAL_UNCONSTRAINED|
DURATION|
EL(?>EMENT|SE|SIF)|
EMPTY|
ESCAPE|
EXCEPT(?>IONS?+)?+|
EX(?>CLUSIVE|ECUTE|ISTS|IT|TERNAL)|
FETCH|
FI(?>LE|NAL|XED)|
FLOAT|
FOR(?>ALL|CE)?+|
FROM|
FUNCTION|
GENERAL|
GOTO|
GR(?>ANT|OUP)|
HA(?>SH|VING)|
HEAP|
HIDDEN|
HOUR|
IDENTIFIED|
IMMEDIATE|
INC(?>LUDING|REMENT)?+|
INDEX(?>ES)?+|INDIC(?>ATOR|ES)|
INS(?>ERT|TANTIABLE)|
INT(?>EGER|ERFACE|ERSECT|ERVAL|O)?+|
IN(?>FINITE|ITIAL|VALIDATE)?+|
IS(?>OLATION)?+|
JAVA|
LA(?>NGUAGE|RGE)|
LE(?>ADING|NGTH|VEL)|
LI(?>BRARY|KE[24C]?+|MIT(?>ED)?+)|
LO(?>CAL|CK|NG)|
MAP|
MAX(?>EXTENTS|LEN)?+|
ME(?>MBER|RGE)|
MIN(?>US|UTE)?+|
MLSLABEL|
MO(?>D(?>E|IFY)?+|NTH)|
MULTISET|
NA(?>ME|N|TURALN?+|TI(?>ONAL|VE))|
NC(?>HAR|LOB)|
NE(?>STED_TABLE_ID|W)|
NO(?>AUDIT|COMPRESS|COPY|T|WAIT)|
NU(?>LL|M(?>BER(?>_BASE)?+|ERIC))|
NVARCHAR2|
OBJECT|
OCI(?>COLL|DATE(?>TIME)?+|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF(?>CURSOR)?+|ROWID|STRING|TYPE)|
OF(?>FLINE)?+|
OLD|
ON(?>LINE|LY)?+|OP(?>AQUE|EN|ERATOR|TION)|
OR(?>ACLE|ADATA|DER|GANIZATION|LANY|LVARY)?+|
OTHERS|
OUT|
OVER(?>LAPS|RIDING)|
PA(?>CKAGE|SCAL|R(?>ALLEL_ENABLE|AMETERS?+|ENT|TITION))|
PCTFREE|
PIPE(?>LINED)?+|
PLS_INTEGER|
POSITIVEN?+|
PR(?>AGMA|ECISION|IOR|IV(?>ATE|ILEGES)|OCEDURE)|
PUBLIC|
RA(?>ISE|NGE|W)|
REF(?>ERENCE)?+|
REM(?>AINDER)?+|
RE(?>A[DL]|CORD|LIES_ON|NAME|SOURCE|SULT(?>_CACHE)?+|TURN(?>ING)?+|V(?>ERSE|OKE))|
RO(?>LLBACK|W(?>ID|NUM|S)?+)|
SA(?>MPLE|VE(?>POINT)?+)|
SB[124]|
SE(?>COND|GMENT|LECT|LF|PARATE|QUENCE|RIALIZABLE|SSION|T)|
SH(?>ARE|ORT)|
SI(?>GNTYPE|MPLE_(?>DOUBLE|FLOAT|INTEGER)|ZE(?>_T)?+)|
SMALLINT|
SOME|
SPARSE|
SQL(?>CODE|DATA|NAME|STATE)?+|
STA(?>NDARD|RT|TIC)|
ST(?>DDEV|ORED|RING|RUCT|YLE)|
SUB(?>MULTISET|PARTITION|STITUTABLE|TYPE)|
SU(?>CCESSFUL|M)|
SY(?>NONYM|SDATE)|
TAB(?>AUTH|LE)|
TDO|
THEN?+|
TIMESTAMP(?>_LTZ_UNCONSTRAINED|_TZ_UNCONSTRAINED|_UNCONSTRAINED)?+|
TIMEZONE_(?>ABBR|HOUR|MINUTE|REGION)|
TIME(?>_TZ_UNCONSTRAINED|_UNCONSTRAINED)?+|
TO|
TR(?>AILING|ANSACTION(?>AL)?+|IGGER|USTED)|
TYPE|
UB[124]|
UID|
UN(?>DER|ION|IQUE|SIGNED|TRUSTED)|
UPDATE|
UROWID|
US(?>ER?+|ING)|
VAL(?>IDATE|IST|UES?+)|
VAR(?>CHAR2?+|IABLE|IANCE|RAY|YING)|
VIEWS?+|
VOID|
WHEN(?>EVER)?+|
WH(?>ERE|ILE)|
WITH|
WORK|
WR(?>APPED|ITE)|
YEAR|
YMINTERVAL_UNCONSTRAINED|
ZONE
)\M
TRUE
FALSE
12
0


0
FALSE
TRUE
FALSE
FALSE




FALSE

Keyword helper

37
\m(?>
AFTER|
AUTONOMOUS_TRANSACTION|
BEFORE|
BULK_(?>EXCEPTIONS|ROWCOUNT)|
CONSTRAINT|
CU(?>BE|RRVAL)|
EACH|
EX(?>CEPTION_INIT|TEND)|
FALSE|
FIRST|
FO(?>REIGN|UND)|
FULL|
GLOBAL|
INNER|
ISOPEN|
JOIN|
KE(?>EP|Y)|
LAST|
LEFT|
MINEXTENTS|
NEXT(?>VAL)?+|
NOTFOUND|
NULLS|
OUTER|
PRIMARY|
PURGE|
RE(?>FERENCES|PLACE|STRICT_REFERENCES)|
RIGHT|
RN(?>DS|PS)|
RO(?>LLUP|W(?>COUNT|TYPE))|
SIBLINGS|
TEMPORARY|
TR(?>IM|U(?>E|NCATE|ST))|
WAIT|
WN(?>DS|PS)
)\M
TRUE
FALSE
12
0


0
FALSE
TRUE
FALSE
FALSE




FALSE

Float

(?>\.[0-9]++(?>[eE][+-]?+[0-9]++)?+[fdFD]?+|\m[0-9]++(?>\.[0-9]*+(?>[eE][+-]?+[0-9]++)?+[fdFD]?+|[eE][+-]?+[0-9]++[fdFD]?+|[fdFD]))\M
FALSE
FALSE
20
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Integer

\m[0-9]++\M
FALSE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Single-line SQL hint

--\+.*+
FALSE
FALSE
11
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Single-line comment

--.*+
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Multi-line SQL hint
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
/\*\+
FALSE
FALSE
11
0


4
FALSE
FALSE
FALSE
FALSE
0

/*+*/
sql
FALSE
*/
Multi-line comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
/\*
FALSE
FALSE
9
0


3
FALSE
FALSE
FALSE
FALSE
0

/**/
sql
FALSE
*/
Double-quoted identifier
Can be multi-line. Closing " is optional so an unclosed identifier is colored until the end of the file.
(")[^"]*+(")?+
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE
1
2
DQ
sql
FALSE
"
Alternative-quoted string '<>'
Can be multi-line. Closing is optional so an unclosed string is colored until the end of the file. We use a toggle subscheme to find the closing tag for performance reasons.
[nN]?+[qQ]('<)
FALSE
FALSE
17
0


5
FALSE
FALSE
FALSE
FALSE
1

Q'<>'
sql
FALSE
>'
Alternative-quoted string '[]'
Can be multi-line. Closing is optional so an unclosed string is colored until the end of the file. We use a toggle subscheme to find the closing tag for performance reasons.
[nN]?+[qQ]('\[)
FALSE
FALSE
17
0


6
FALSE
FALSE
FALSE
FALSE
1

Q'[]'
sql
FALSE
]'
Alternative-quoted string '{}'
Can be multi-line. Closing is optional so an unclosed string is colored until the end of the file. We use a toggle subscheme to find the closing tag for performance reasons.
[nN]?+[qQ]('{)
FALSE
FALSE
17
0


7
FALSE
FALSE
FALSE
FALSE
1

Q'{}'
sql
FALSE
}'
Alternative-quoted string '()'
Can be multi-line. Closing is optional so an unclosed string is colored until the end of the file. We use a toggle subscheme to find the closing tag for performance reasons.
[nN]?+[qQ]('\()
FALSE
FALSE
17
0


8
FALSE
FALSE
FALSE
FALSE
1

Q'()'
sql
FALSE
)'
Alternative-quoted string
Can be multi-line. Closing is optional so an unclosed string is colored until the end of the file.
[nN]?+[qQ]('([^\n\r\t [({<])).*?(\2'|\z)
FALSE
TRUE
17
0


0
TRUE
FALSE
FALSE
FALSE
1
3
Q'xx'
sql
FALSE
\3'
Single-quoted string
Can be multi-line. Closing ' is optional so an unclosed string is colored until the end of the file.
[nN]?+(')(?>[^']|'')*+('|$)
FALSE
FALSE
17
0


0
TRUE
FALSE
FALSE
FALSE
1
2
SQ
sql
FALSE
'
Opening parenthesis

\(
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

()
sql
FALSE
)
Closing parenthesis

\)
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
()
sql
FALSE
(
Opening bracket

\[
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

[]
sql
FALSE
]
Closing bracket

]
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
[]
sql
FALSE
[
Opening brace

{
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

{}
sql
FALSE
}
Closing brace

}
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
{}
sql
FALSE
{
Operator
Don't repeat the character class so =/* is properly highlighted as a comment after an equals sign
[-+*/=<>:;|!~^%@]
FALSE
FALSE
23
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

0
6
Multi-line comment
1
9
TRUE
0


1
Closing */

\*/
FALSE
FALSE
9
0


2
FALSE
FALSE
FALSE
FALSE

0
/**/
sql
FALSE

Multi-line SQL hint
1
11
FALSE
0


1
Closing */

\*/
FALSE
FALSE
9
0


2
FALSE
FALSE
FALSE
FALSE

0
/*+*/
sql
FALSE

Alternative-quoted string '<>'
1
17
TRUE
0


1
Closing >'

>'
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
Q'<>'
sql
FALSE

Alternative-quoted string '[]'
1
17
TRUE
0


1
Closing ]'

\]'
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
Q'[]'
sql
FALSE

Alternative-quoted string '{}'
1
17
TRUE
0


1
Closing }'

}'
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
Q'{}'
sql
FALSE

Alternative-quoted string '()'
1
17
TRUE
0


1
Closing )'

\)'
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
Q'()'
sql
FALSE

