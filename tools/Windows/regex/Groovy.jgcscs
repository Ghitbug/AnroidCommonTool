JGCSCS
5
Groovy
*.groovy
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://groovy.codehaus.org/
TRUE
//

0
5
// Groovy
/** documentation comment */
assert 1 + 1 == 2
def S = "string$groovy"
def RE = /regex$groovy/
0
FALSE
20
Shebang

\A#!.*+
FALSE
FALSE
9
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Single-line comment

//.*+
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Documentation comment

/\*\*(?!/)
FALSE
TRUE
10
0


3
FALSE
FALSE
FALSE
FALSE
0

/****/
code
FALSE
*/
Multi-line comment

/\*
FALSE
TRUE
9
0


4
FALSE
FALSE
FALSE
FALSE
0

/**/
code
FALSE
*/
Opening bracket

{
FALSE
FALSE
25
0


0
FALSE
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
Closing bracket

}
FALSE
FALSE
25
0


0
FALSE
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
Opening bracket

\[
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
Closing bracket

]
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
Opening parenthesis

\(
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

()
code
FALSE
)
Closing parenthesis

\)
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
()
code
FALSE
(
Triple-double-quoted string

"""
FALSE
TRUE
17
0


5
TRUE
FALSE
FALSE
FALSE
0

TDQ
code
FALSE
"""
Triple-single-quoted string

'''
FALSE
TRUE
17
0


6
TRUE
FALSE
FALSE
FALSE
0

TSQ
code
FALSE
'''
Double-quoted string
Must come after triple-double-quoted string in the scheme
"
FALSE
FALSE
17
0


7
TRUE
FALSE
FALSE
FALSE
0

DQ
code
FALSE
"
Single-quoted string
Must come after the triple-single-quoted string in the scheme.
'
FALSE
FALSE
17
0


8
FALSE
FALSE
FALSE
FALSE
0

SQ
code
FALSE
'
Double-slashed string
We require the =, ==, or =~ operator, or an opening parenthesis to be present, so there's no confusion between // and the division operator
(?<=[=~(]\s*)/
FALSE
FALSE
18
0


9
FALSE
FALSE
FALSE
FALSE
0

//
code
FALSE
/
Hexadecimal number

\b0x[0-9A-F]++[GL]?+\b
TRUE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Float

(?>\b[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?[DF]?+\b
TRUE
FALSE
20
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Integer

\b[0-9]++[DFL]?+\b
TRUE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Reserved words

\b(?>abstract|any|as(?:sert)|boolean|break|byte|case|catch|char|class|const|continue|def(?:ault)?|do(?:uble)?|else|enum|extends|final(?:ly)?|float|for|goto|if|implements|import|instanceof|in(?:t(?:erface)?)?|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throws?|transient|try|void|volatile|while|with|true|false|null)\b
FALSE
FALSE
12
0


-1
FALSE
FALSE
FALSE
FALSE




FALSE

Operator
Do not repeat the character class, to make sure def pattern = ~/foo/ is highlighted as a regex
[-+*/=<>%&^|!~?]
FALSE
FALSE
23
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

0
7
Documentation comment
1
10
TRUE
0


1
Closing */

\*/
FALSE
FALSE
10
0


2
FALSE
FALSE
FALSE
FALSE

0
/****/
code
FALSE
/**
Comment
1
9
TRUE
0


1
Closing */

\*/
FALSE
FALSE
9
0


2
FALSE
FALSE
FALSE
FALSE

0
/**/
code
FALSE
/*
Triple-double-quoted string
1
17
FALSE
0


3
Closing quote

"""
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
TDQ
code
FALSE
"""
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Variable

\$(?:[\w.]++|\{[^}]+\})
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Triple-single-quoted string
1
17
FALSE
0


2
Closing quote

'''
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
TSQ
code
FALSE
'''
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Double-quoted string
1
17
FALSE
0


4
Closing quote

"
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
DQ
code
FALSE
"
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Variable

\$(?:[\w.]++|\{[^}]+\})
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

EOL
Double-quoted strings cannot span across line breaks
[\r\n]
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE




FALSE

Single-quoted string
1
17
FALSE
0


3
Closing quote

'
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE

0
SQ
code
FALSE
'
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
17
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

EOL
Single-quoted strings cannot span across line breaks
[\r\n]
FALSE
FALSE
17
0


2
FALSE
FALSE
FALSE
FALSE




FALSE

Double-slashed string
1
18
FALSE
0


3
Closing slash

(/)\w*
FALSE
FALSE
18
0


2
FALSE
FALSE
FALSE
FALSE

1
//
code
FALSE
/
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
18
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Variable

\$(?:[\w.]++|\{[^}]+\})
FALSE
FALSE
14
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

