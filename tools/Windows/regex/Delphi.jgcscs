JGCSCS
5
Delphi
*.pas;*.dpr;*.dpk
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.embarcadero.com/products/delphi
TRUE
//

1
Delphi source code
6
{$DEFINE DIRECTIVE}
// comment
procedure Test(X: Integer);
begin
  Number := 1234;  S := 'abcdef';
end;
0
FALSE
20
Begin
Reserved words that pair up with "end"; "class" and "interface" are tricky because they only pair up with "end" in type definitions
\b(?>begin|case|record|try|initialization|asm|(?<=\b\s*+=\s*+)(?:class|interface|object)(?!\s*+(?:(?:\([^);]*+\))?+\s*+;|of)))\b
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE
0

beginend
code
FALSE
end
End

\bend\b
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE

0
beginend
code
FALSE
begin
Repeat

\brepeat\b
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE
0

repeatuntil
code
FALSE
until
Until

\buntil\b
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE

0
repeatuntil
code
FALSE
repeat
Property

\bproperty\b
TRUE
FALSE
12
0


3
FALSE
FALSE
FALSE
FALSE




FALSE

Reserved words
Must be listed after "begin" so we can match "class" and "interface" with this element if the "begin" element doesn't match them
\b(?>absolute|abstract|and|array|as|assembler|automated|cdecl|class|const(?:ructor)?|deprecated|destructor|dispid|dispinterface|div|do(?:wnto)?|dynamic|else|except|exports?|external|far|file|finalization|finally|for(?:ward)?|function|goto|if|implementation|in(?:herited|line|terface)?|is|label|library|message|mod|near|nil|not|of|on|or|out|overload|override|packed|pascal|platform|private|procedure|program|protected|public|published|raise|register|reintroduce|resourcestring|safecall|set|shl|shr|stdcall|strict|string|then|threadvar|to|type|unit|uses|var|virtual|while|with|xor)\b
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE



code
FALSE

Float

\b[0-9]++(?:\.[0-9]++(?:E[+-]?[0-9]++)?+|E[+-]?[0-9]++)\b
TRUE
FALSE
20
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Integer

\b[0-9]++\b
TRUE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Hexadecimal number

\$[A-F0-9]++\b
TRUE
FALSE
19
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Single-line comment

//.*+
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Compiler directive
Closing } optional so an unclosed directive is colored until the end of the file
({)\$[^}]*+(})?
FALSE
FALSE
11
0


0
FALSE
FALSE
FALSE
FALSE
1
2
{$}

FALSE
}
Multi-line comment
Closing } optional so an unclosed comment is colored until the end of the file
({)[^}]*+(})?
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE
1
2
{}

FALSE
}
Multi-line comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
\(\*
FALSE
FALSE
9
0


4
FALSE
FALSE
FALSE
FALSE
0

(**)

FALSE
*)
Opening parenthesis

\(
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

()
code
FALSE
)
Closing parenthesis

\)
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
()
code
FALSE
(
Opening bracket

\[
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
Closing bracket

]
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
Operator
Since // starts a single line comment, we must not match more than one operator character at the same time (i.e. no quantifier in the regex)
[-+*/:@^<>=]
FALSE
FALSE
23
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

String
Closing ' optional so unclosed strings are colored until the end of the line
(')[^'\r\n]*+('?)
FALSE
FALSE
17
0


0
TRUE
FALSE
FALSE
FALSE
1
2

code
FALSE

Character

#(?:\$[A-F0-9]++|[0-9]++)\b
TRUE
FALSE
16
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

0
2
Property
1
0
FALSE
0


9
Reserved words
These words are only reserved in property definitions
\b(?>read|write|index|default|nodefault|string|array|stored)\b
TRUE
FALSE
12
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

End of property definition

;
FALSE
FALSE
0
0


2
FALSE
FALSE
FALSE
FALSE




FALSE

Single-line comment

//.*+
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE




FALSE

Compiler directive
Closing } optional so an unclosed directive is colored until the end of the file
({)\$[^}]*+(})?
FALSE
FALSE
11
0


0
FALSE
FALSE
FALSE
FALSE
1
2
{$}

FALSE

Multi-line comment
Closing } optional so an unclosed comment is colored until the end of the file
({)[^}]*+(})?
FALSE
FALSE
9
0


0
TRUE
FALSE
FALSE
FALSE
1
2
{}

FALSE

Multi-line comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
\(\*
FALSE
FALSE
9
0


4
FALSE
FALSE
FALSE
FALSE
0

(**)

FALSE

Operator
Since // starts a single line comment, we must not match more than one operator character at the same time (i.e. no quantifier in the regex)
[-+*/:@^<>=]
FALSE
FALSE
23
0


0
FALSE
FALSE
FALSE
FALSE




FALSE

Brackets

\[
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE
0

[]
code
FALSE

Brackets

]
FALSE
FALSE
24
0


0
FALSE
FALSE
FALSE
FALSE

0
[]
code
FALSE

(*Comment*)
1
9
TRUE
0


1
Closing *)

\*\)
FALSE
FALSE
9
0


1
FALSE
FALSE
FALSE
FALSE

0
(**)

FALSE

